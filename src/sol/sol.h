#pragma once

#include <stddef.h>
#include <stdint.h>

#if defined(_WIN32)
#define PUBLIC_API extern "C" __declspec(dllexport)
#else
#define PUBLIC_API extern "C" __attribute__((visibility("default")))
#endif

// from https://github.com/dsprenkels/randombytes
/** write `n` bytes of high quality random bytes to `buf` */
int sol_randombytes(void* buf, size_t n);

// from https://tweetnacl.cr.yp.to/20140427/tweetnacl.h
// #ifndef TWEETNACL_H
// #define TWEETNACL_H
#define sol_crypto_auth_PRIMITIVE "hmacsha512256"
#define sol_crypto_auth sol_crypto_auth_hmacsha512256
#define sol_crypto_auth_verify sol_crypto_auth_hmacsha512256_verify
#define sol_crypto_auth_BYTES sol_crypto_auth_hmacsha512256_BYTES
#define sol_crypto_auth_KEYBYTES sol_crypto_auth_hmacsha512256_KEYBYTES
#define sol_crypto_auth_IMPLEMENTATION sol_crypto_auth_hmacsha512256_IMPLEMENTATION
#define sol_crypto_auth_VERSION sol_crypto_auth_hmacsha512256_VERSION
#define sol_crypto_auth_hmacsha512256_tweet_BYTES 32
#define sol_crypto_auth_hmacsha512256_tweet_KEYBYTES 32
extern int sol_crypto_auth_hmacsha512256_tweet(unsigned char *,const unsigned char *,unsigned long long,const unsigned char *);
extern int sol_crypto_auth_hmacsha512256_tweet_verify(const unsigned char *,const unsigned char *,unsigned long long,const unsigned char *);
#define sol_crypto_auth_hmacsha512256_tweet_VERSION "-"
#define sol_crypto_auth_hmacsha512256 sol_crypto_auth_hmacsha512256_tweet
#define sol_crypto_auth_hmacsha512256_verify sol_crypto_auth_hmacsha512256_tweet_verify
#define sol_crypto_auth_hmacsha512256_BYTES sol_crypto_auth_hmacsha512256_tweet_BYTES
#define sol_crypto_auth_hmacsha512256_KEYBYTES sol_crypto_auth_hmacsha512256_tweet_KEYBYTES
#define sol_crypto_auth_hmacsha512256_VERSION sol_crypto_auth_hmacsha512256_tweet_VERSION
#define sol_crypto_auth_hmacsha512256_IMPLEMENTATION "sol_crypto_auth/hmacsha512256/tweet"
#define sol_crypto_box_PRIMITIVE "curve25519xsalsa20poly1305"
#define sol_crypto_box sol_crypto_box_curve25519xsalsa20poly1305
#define sol_crypto_box_open sol_crypto_box_curve25519xsalsa20poly1305_open
#define sol_crypto_box_keypair sol_crypto_box_curve25519xsalsa20poly1305_keypair
#define sol_crypto_box_beforenm sol_crypto_box_curve25519xsalsa20poly1305_beforenm
#define sol_crypto_box_afternm sol_crypto_box_curve25519xsalsa20poly1305_afternm
#define sol_crypto_box_open_afternm sol_crypto_box_curve25519xsalsa20poly1305_open_afternm
#define sol_crypto_box_PUBLICKEYBYTES sol_crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES
#define sol_crypto_box_SECRETKEYBYTES sol_crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES
#define sol_crypto_box_BEFORENMBYTES sol_crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES
#define sol_crypto_box_NONCEBYTES sol_crypto_box_curve25519xsalsa20poly1305_NONCEBYTES
#define sol_crypto_box_ZEROBYTES sol_crypto_box_curve25519xsalsa20poly1305_ZEROBYTES
#define sol_crypto_box_BOXZEROBYTES sol_crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES
#define sol_crypto_box_IMPLEMENTATION sol_crypto_box_curve25519xsalsa20poly1305_IMPLEMENTATION
#define sol_crypto_box_VERSION sol_crypto_box_curve25519xsalsa20poly1305_VERSION
#define sol_crypto_box_curve25519xsalsa20poly1305_tweet_PUBLICKEYBYTES 32
#define sol_crypto_box_curve25519xsalsa20poly1305_tweet_SECRETKEYBYTES 32
#define sol_crypto_box_curve25519xsalsa20poly1305_tweet_BEFORENMBYTES 32
#define sol_crypto_box_curve25519xsalsa20poly1305_tweet_NONCEBYTES 24
#define sol_crypto_box_curve25519xsalsa20poly1305_tweet_ZEROBYTES 32
#define sol_crypto_box_curve25519xsalsa20poly1305_tweet_BOXZEROBYTES 16
extern int sol_crypto_box_curve25519xsalsa20poly1305_tweet(unsigned char *,const unsigned char *,unsigned long long,const unsigned char *,const unsigned char *,const unsigned char *);
extern int sol_crypto_box_curve25519xsalsa20poly1305_tweet_open(unsigned char *,const unsigned char *,unsigned long long,const unsigned char *,const unsigned char *,const unsigned char *);
extern int sol_crypto_box_curve25519xsalsa20poly1305_tweet_keypair(unsigned char *,unsigned char *);
extern int sol_crypto_box_curve25519xsalsa20poly1305_tweet_beforenm(unsigned char *,const unsigned char *,const unsigned char *);
extern int sol_crypto_box_curve25519xsalsa20poly1305_tweet_afternm(unsigned char *,const unsigned char *,unsigned long long,const unsigned char *,const unsigned char *);
extern int sol_crypto_box_curve25519xsalsa20poly1305_tweet_open_afternm(unsigned char *,const unsigned char *,unsigned long long,const unsigned char *,const unsigned char *);
#define sol_crypto_box_curve25519xsalsa20poly1305_tweet_VERSION "-"
#define sol_crypto_box_curve25519xsalsa20poly1305 sol_crypto_box_curve25519xsalsa20poly1305_tweet
#define sol_crypto_box_curve25519xsalsa20poly1305_open sol_crypto_box_curve25519xsalsa20poly1305_tweet_open
#define sol_crypto_box_curve25519xsalsa20poly1305_keypair sol_crypto_box_curve25519xsalsa20poly1305_tweet_keypair
#define sol_crypto_box_curve25519xsalsa20poly1305_beforenm sol_crypto_box_curve25519xsalsa20poly1305_tweet_beforenm
#define sol_crypto_box_curve25519xsalsa20poly1305_afternm sol_crypto_box_curve25519xsalsa20poly1305_tweet_afternm
#define sol_crypto_box_curve25519xsalsa20poly1305_open_afternm sol_crypto_box_curve25519xsalsa20poly1305_tweet_open_afternm
#define sol_crypto_box_curve25519xsalsa20poly1305_PUBLICKEYBYTES sol_crypto_box_curve25519xsalsa20poly1305_tweet_PUBLICKEYBYTES
#define sol_crypto_box_curve25519xsalsa20poly1305_SECRETKEYBYTES sol_crypto_box_curve25519xsalsa20poly1305_tweet_SECRETKEYBYTES
#define sol_crypto_box_curve25519xsalsa20poly1305_BEFORENMBYTES sol_crypto_box_curve25519xsalsa20poly1305_tweet_BEFORENMBYTES
#define sol_crypto_box_curve25519xsalsa20poly1305_NONCEBYTES sol_crypto_box_curve25519xsalsa20poly1305_tweet_NONCEBYTES
#define sol_crypto_box_curve25519xsalsa20poly1305_ZEROBYTES sol_crypto_box_curve25519xsalsa20poly1305_tweet_ZEROBYTES
#define sol_crypto_box_curve25519xsalsa20poly1305_BOXZEROBYTES sol_crypto_box_curve25519xsalsa20poly1305_tweet_BOXZEROBYTES
#define sol_crypto_box_curve25519xsalsa20poly1305_VERSION sol_crypto_box_curve25519xsalsa20poly1305_tweet_VERSION
#define sol_crypto_box_curve25519xsalsa20poly1305_IMPLEMENTATION "sol_crypto_box/curve25519xsalsa20poly1305/tweet"
#define sol_crypto_core_PRIMITIVE "salsa20"
#define sol_crypto_core sol_crypto_core_salsa20
#define sol_crypto_core_OUTPUTBYTES sol_crypto_core_salsa20_OUTPUTBYTES
#define sol_crypto_core_INPUTBYTES sol_crypto_core_salsa20_INPUTBYTES
#define sol_crypto_core_KEYBYTES sol_crypto_core_salsa20_KEYBYTES
#define sol_crypto_core_CONSTBYTES sol_crypto_core_salsa20_CONSTBYTES
#define sol_crypto_core_IMPLEMENTATION sol_crypto_core_salsa20_IMPLEMENTATION
#define sol_crypto_core_VERSION sol_crypto_core_salsa20_VERSION
#define sol_crypto_core_salsa20_tweet_OUTPUTBYTES 64
#define sol_crypto_core_salsa20_tweet_INPUTBYTES 16
#define sol_crypto_core_salsa20_tweet_KEYBYTES 32
#define sol_crypto_core_salsa20_tweet_CONSTBYTES 16
extern int sol_crypto_core_salsa20_tweet(unsigned char *,const unsigned char *,const unsigned char *,const unsigned char *);
#define sol_crypto_core_salsa20_tweet_VERSION "-"
#define sol_crypto_core_salsa20 sol_crypto_core_salsa20_tweet
#define sol_crypto_core_salsa20_OUTPUTBYTES sol_crypto_core_salsa20_tweet_OUTPUTBYTES
#define sol_crypto_core_salsa20_INPUTBYTES sol_crypto_core_salsa20_tweet_INPUTBYTES
#define sol_crypto_core_salsa20_KEYBYTES sol_crypto_core_salsa20_tweet_KEYBYTES
#define sol_crypto_core_salsa20_CONSTBYTES sol_crypto_core_salsa20_tweet_CONSTBYTES
#define sol_crypto_core_salsa20_VERSION sol_crypto_core_salsa20_tweet_VERSION
#define sol_crypto_core_salsa20_IMPLEMENTATION "sol_crypto_core/salsa20/tweet"
#define sol_crypto_core_hsalsa20_tweet_OUTPUTBYTES 32
#define sol_crypto_core_hsalsa20_tweet_INPUTBYTES 16
#define sol_crypto_core_hsalsa20_tweet_KEYBYTES 32
#define sol_crypto_core_hsalsa20_tweet_CONSTBYTES 16
extern int sol_crypto_core_hsalsa20_tweet(unsigned char *,const unsigned char *,const unsigned char *,const unsigned char *);
#define sol_crypto_core_hsalsa20_tweet_VERSION "-"
#define sol_crypto_core_hsalsa20 sol_crypto_core_hsalsa20_tweet
#define sol_crypto_core_hsalsa20_OUTPUTBYTES sol_crypto_core_hsalsa20_tweet_OUTPUTBYTES
#define sol_crypto_core_hsalsa20_INPUTBYTES sol_crypto_core_hsalsa20_tweet_INPUTBYTES
#define sol_crypto_core_hsalsa20_KEYBYTES sol_crypto_core_hsalsa20_tweet_KEYBYTES
#define sol_crypto_core_hsalsa20_CONSTBYTES sol_crypto_core_hsalsa20_tweet_CONSTBYTES
#define sol_crypto_core_hsalsa20_VERSION sol_crypto_core_hsalsa20_tweet_VERSION
#define sol_crypto_core_hsalsa20_IMPLEMENTATION "sol_crypto_core/hsalsa20/tweet"
#define sol_crypto_hashblocks_PRIMITIVE "sha512"
#define sol_crypto_hashblocks sol_crypto_hashblocks_sha512
#define sol_crypto_hashblocks_STATEBYTES sol_crypto_hashblocks_sha512_STATEBYTES
#define sol_crypto_hashblocks_BLOCKBYTES sol_crypto_hashblocks_sha512_BLOCKBYTES
#define sol_crypto_hashblocks_IMPLEMENTATION sol_crypto_hashblocks_sha512_IMPLEMENTATION
#define sol_crypto_hashblocks_VERSION sol_crypto_hashblocks_sha512_VERSION
#define sol_crypto_hashblocks_sha512_tweet_STATEBYTES 64
#define sol_crypto_hashblocks_sha512_tweet_BLOCKBYTES 128
extern int sol_crypto_hashblocks_sha512_tweet(unsigned char *,const unsigned char *,unsigned long long);
#define sol_crypto_hashblocks_sha512_tweet_VERSION "-"
#define sol_crypto_hashblocks_sha512 sol_crypto_hashblocks_sha512_tweet
#define sol_crypto_hashblocks_sha512_STATEBYTES sol_crypto_hashblocks_sha512_tweet_STATEBYTES
#define sol_crypto_hashblocks_sha512_BLOCKBYTES sol_crypto_hashblocks_sha512_tweet_BLOCKBYTES
#define sol_crypto_hashblocks_sha512_VERSION sol_crypto_hashblocks_sha512_tweet_VERSION
#define sol_crypto_hashblocks_sha512_IMPLEMENTATION "sol_crypto_hashblocks/sha512/tweet"
#define sol_crypto_hashblocks_sha256_tweet_STATEBYTES 32
#define sol_crypto_hashblocks_sha256_tweet_BLOCKBYTES 64
extern int sol_crypto_hashblocks_sha256_tweet(unsigned char *,const unsigned char *,unsigned long long);
#define sol_crypto_hashblocks_sha256_tweet_VERSION "-"
#define sol_crypto_hashblocks_sha256 sol_crypto_hashblocks_sha256_tweet
#define sol_crypto_hashblocks_sha256_STATEBYTES sol_crypto_hashblocks_sha256_tweet_STATEBYTES
#define sol_crypto_hashblocks_sha256_BLOCKBYTES sol_crypto_hashblocks_sha256_tweet_BLOCKBYTES
#define sol_crypto_hashblocks_sha256_VERSION sol_crypto_hashblocks_sha256_tweet_VERSION
#define sol_crypto_hashblocks_sha256_IMPLEMENTATION "sol_crypto_hashblocks/sha256/tweet"
#define sol_crypto_hash_PRIMITIVE "sha512"
#define sol_crypto_hash sol_crypto_hash_sha512
#define sol_crypto_hash_BYTES sol_crypto_hash_sha512_BYTES
#define sol_crypto_hash_IMPLEMENTATION sol_crypto_hash_sha512_IMPLEMENTATION
#define sol_crypto_hash_VERSION sol_crypto_hash_sha512_VERSION
#define sol_crypto_hash_sha512_tweet_BYTES 64
extern int sol_crypto_hash_sha512_tweet(unsigned char *,const unsigned char *,unsigned long long);
#define sol_crypto_hash_sha512_tweet_VERSION "-"
#define sol_crypto_hash_sha512 sol_crypto_hash_sha512_tweet
#define sol_crypto_hash_sha512_BYTES sol_crypto_hash_sha512_tweet_BYTES
#define sol_crypto_hash_sha512_VERSION sol_crypto_hash_sha512_tweet_VERSION
#define sol_crypto_hash_sha512_IMPLEMENTATION "sol_crypto_hash/sha512/tweet"
#define sol_crypto_hash_sha256_tweet_BYTES 32
extern int sol_crypto_hash_sha256_tweet(unsigned char *,const unsigned char *,unsigned long long);
#define sol_crypto_hash_sha256_tweet_VERSION "-"
#define sol_crypto_hash_sha256 sol_crypto_hash_sha256_tweet
#define sol_crypto_hash_sha256_BYTES sol_crypto_hash_sha256_tweet_BYTES
#define sol_crypto_hash_sha256_VERSION sol_crypto_hash_sha256_tweet_VERSION
#define sol_crypto_hash_sha256_IMPLEMENTATION "sol_crypto_hash/sha256/tweet"
#define sol_crypto_onetimeauth_PRIMITIVE "poly1305"
#define sol_crypto_onetimeauth sol_crypto_onetimeauth_poly1305
#define sol_crypto_onetimeauth_verify sol_crypto_onetimeauth_poly1305_verify
#define sol_crypto_onetimeauth_BYTES sol_crypto_onetimeauth_poly1305_BYTES
#define sol_crypto_onetimeauth_KEYBYTES sol_crypto_onetimeauth_poly1305_KEYBYTES
#define sol_crypto_onetimeauth_IMPLEMENTATION sol_crypto_onetimeauth_poly1305_IMPLEMENTATION
#define sol_crypto_onetimeauth_VERSION sol_crypto_onetimeauth_poly1305_VERSION
#define sol_crypto_onetimeauth_poly1305_tweet_BYTES 16
#define sol_crypto_onetimeauth_poly1305_tweet_KEYBYTES 32
extern int sol_crypto_onetimeauth_poly1305_tweet(unsigned char *,const unsigned char *,unsigned long long,const unsigned char *);
extern int sol_crypto_onetimeauth_poly1305_tweet_verify(const unsigned char *,const unsigned char *,unsigned long long,const unsigned char *);
#define sol_crypto_onetimeauth_poly1305_tweet_VERSION "-"
#define sol_crypto_onetimeauth_poly1305 sol_crypto_onetimeauth_poly1305_tweet
#define sol_crypto_onetimeauth_poly1305_verify sol_crypto_onetimeauth_poly1305_tweet_verify
#define sol_crypto_onetimeauth_poly1305_BYTES sol_crypto_onetimeauth_poly1305_tweet_BYTES
#define sol_crypto_onetimeauth_poly1305_KEYBYTES sol_crypto_onetimeauth_poly1305_tweet_KEYBYTES
#define sol_crypto_onetimeauth_poly1305_VERSION sol_crypto_onetimeauth_poly1305_tweet_VERSION
#define sol_crypto_onetimeauth_poly1305_IMPLEMENTATION "sol_crypto_onetimeauth/poly1305/tweet"
#define sol_crypto_scalarmult_PRIMITIVE "curve25519"
#define sol_crypto_scalarmult sol_crypto_scalarmult_curve25519
#define sol_crypto_scalarmult_base sol_crypto_scalarmult_curve25519_base
#define sol_crypto_scalarmult_BYTES sol_crypto_scalarmult_curve25519_BYTES
#define sol_crypto_scalarmult_SCALARBYTES sol_crypto_scalarmult_curve25519_SCALARBYTES
#define sol_crypto_scalarmult_IMPLEMENTATION sol_crypto_scalarmult_curve25519_IMPLEMENTATION
#define sol_crypto_scalarmult_VERSION sol_crypto_scalarmult_curve25519_VERSION
#define sol_crypto_scalarmult_curve25519_tweet_BYTES 32
#define sol_crypto_scalarmult_curve25519_tweet_SCALARBYTES 32
extern int sol_crypto_scalarmult_curve25519_tweet(unsigned char *,const unsigned char *,const unsigned char *);
extern int sol_crypto_scalarmult_curve25519_tweet_base(unsigned char *,const unsigned char *);
#define sol_crypto_scalarmult_curve25519_tweet_VERSION "-"
#define sol_crypto_scalarmult_curve25519 sol_crypto_scalarmult_curve25519_tweet
#define sol_crypto_scalarmult_curve25519_base sol_crypto_scalarmult_curve25519_tweet_base
#define sol_crypto_scalarmult_curve25519_BYTES sol_crypto_scalarmult_curve25519_tweet_BYTES
#define sol_crypto_scalarmult_curve25519_SCALARBYTES sol_crypto_scalarmult_curve25519_tweet_SCALARBYTES
#define sol_crypto_scalarmult_curve25519_VERSION sol_crypto_scalarmult_curve25519_tweet_VERSION
#define sol_crypto_scalarmult_curve25519_IMPLEMENTATION "sol_crypto_scalarmult/curve25519/tweet"
#define sol_crypto_secretbox_PRIMITIVE "xsalsa20poly1305"
#define sol_crypto_secretbox sol_crypto_secretbox_xsalsa20poly1305
#define sol_crypto_secretbox_open sol_crypto_secretbox_xsalsa20poly1305_open
#define sol_crypto_secretbox_KEYBYTES sol_crypto_secretbox_xsalsa20poly1305_KEYBYTES
#define sol_crypto_secretbox_NONCEBYTES sol_crypto_secretbox_xsalsa20poly1305_NONCEBYTES
#define sol_crypto_secretbox_ZEROBYTES sol_crypto_secretbox_xsalsa20poly1305_ZEROBYTES
#define sol_crypto_secretbox_BOXZEROBYTES sol_crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES
#define sol_crypto_secretbox_IMPLEMENTATION sol_crypto_secretbox_xsalsa20poly1305_IMPLEMENTATION
#define sol_crypto_secretbox_VERSION sol_crypto_secretbox_xsalsa20poly1305_VERSION
#define sol_crypto_secretbox_xsalsa20poly1305_tweet_KEYBYTES 32
#define sol_crypto_secretbox_xsalsa20poly1305_tweet_NONCEBYTES 24
#define sol_crypto_secretbox_xsalsa20poly1305_tweet_ZEROBYTES 32
#define sol_crypto_secretbox_xsalsa20poly1305_tweet_BOXZEROBYTES 16
extern int sol_crypto_secretbox_xsalsa20poly1305_tweet(unsigned char *,const unsigned char *,unsigned long long,const unsigned char *,const unsigned char *);
extern int sol_crypto_secretbox_xsalsa20poly1305_tweet_open(unsigned char *,const unsigned char *,unsigned long long,const unsigned char *,const unsigned char *);
#define sol_crypto_secretbox_xsalsa20poly1305_tweet_VERSION "-"
#define sol_crypto_secretbox_xsalsa20poly1305 sol_crypto_secretbox_xsalsa20poly1305_tweet
#define sol_crypto_secretbox_xsalsa20poly1305_open sol_crypto_secretbox_xsalsa20poly1305_tweet_open
#define sol_crypto_secretbox_xsalsa20poly1305_KEYBYTES sol_crypto_secretbox_xsalsa20poly1305_tweet_KEYBYTES
#define sol_crypto_secretbox_xsalsa20poly1305_NONCEBYTES sol_crypto_secretbox_xsalsa20poly1305_tweet_NONCEBYTES
#define sol_crypto_secretbox_xsalsa20poly1305_ZEROBYTES sol_crypto_secretbox_xsalsa20poly1305_tweet_ZEROBYTES
#define sol_crypto_secretbox_xsalsa20poly1305_BOXZEROBYTES sol_crypto_secretbox_xsalsa20poly1305_tweet_BOXZEROBYTES
#define sol_crypto_secretbox_xsalsa20poly1305_VERSION sol_crypto_secretbox_xsalsa20poly1305_tweet_VERSION
#define sol_crypto_secretbox_xsalsa20poly1305_IMPLEMENTATION "sol_crypto_secretbox/xsalsa20poly1305/tweet"
#define sol_crypto_sign_PRIMITIVE "ed25519"
#define sol_crypto_sign sol_crypto_sign_ed25519
#define sol_crypto_sign_open sol_crypto_sign_ed25519_open
#define sol_crypto_sign_keypair sol_crypto_sign_ed25519_keypair
#define sol_crypto_sign_BYTES sol_crypto_sign_ed25519_BYTES
#define sol_crypto_sign_PUBLICKEYBYTES sol_crypto_sign_ed25519_PUBLICKEYBYTES
#define sol_crypto_sign_SECRETKEYBYTES sol_crypto_sign_ed25519_SECRETKEYBYTES
#define sol_crypto_sign_IMPLEMENTATION sol_crypto_sign_ed25519_IMPLEMENTATION
#define sol_crypto_sign_VERSION sol_crypto_sign_ed25519_VERSION
#define sol_crypto_sign_ed25519_tweet_BYTES 64
#define sol_crypto_sign_ed25519_tweet_PUBLICKEYBYTES 32
#define sol_crypto_sign_ed25519_tweet_SECRETKEYBYTES 64
extern int sol_crypto_sign_ed25519_tweet(unsigned char *,unsigned long long *,const unsigned char *,unsigned long long,const unsigned char *);
extern int sol_crypto_sign_ed25519_tweet_open(unsigned char *,unsigned long long *,const unsigned char *,unsigned long long,const unsigned char *);
extern int sol_crypto_sign_ed25519_tweet_keypair(unsigned char *,unsigned char *);
#define sol_crypto_sign_ed25519_tweet_VERSION "-"
#define sol_crypto_sign_ed25519 sol_crypto_sign_ed25519_tweet
#define sol_crypto_sign_ed25519_open sol_crypto_sign_ed25519_tweet_open
#define sol_crypto_sign_ed25519_keypair sol_crypto_sign_ed25519_tweet_keypair
#define sol_crypto_sign_ed25519_BYTES sol_crypto_sign_ed25519_tweet_BYTES
#define sol_crypto_sign_ed25519_PUBLICKEYBYTES sol_crypto_sign_ed25519_tweet_PUBLICKEYBYTES
#define sol_crypto_sign_ed25519_SECRETKEYBYTES sol_crypto_sign_ed25519_tweet_SECRETKEYBYTES
#define sol_crypto_sign_ed25519_VERSION sol_crypto_sign_ed25519_tweet_VERSION
#define sol_crypto_sign_ed25519_IMPLEMENTATION "sol_crypto_sign/ed25519/tweet"
#define sol_crypto_stream_PRIMITIVE "xsalsa20"
#define sol_crypto_stream sol_crypto_stream_xsalsa20
#define sol_crypto_stream_xor sol_crypto_stream_xsalsa20_xor
#define sol_crypto_stream_KEYBYTES sol_crypto_stream_xsalsa20_KEYBYTES
#define sol_crypto_stream_NONCEBYTES sol_crypto_stream_xsalsa20_NONCEBYTES
#define sol_crypto_stream_IMPLEMENTATION sol_crypto_stream_xsalsa20_IMPLEMENTATION
#define sol_crypto_stream_VERSION sol_crypto_stream_xsalsa20_VERSION
#define sol_crypto_stream_xsalsa20_tweet_KEYBYTES 32
#define sol_crypto_stream_xsalsa20_tweet_NONCEBYTES 24
extern int sol_crypto_stream_xsalsa20_tweet(unsigned char *,unsigned long long,const unsigned char *,const unsigned char *);
extern int sol_crypto_stream_xsalsa20_tweet_xor(unsigned char *,const unsigned char *,unsigned long long,const unsigned char *,const unsigned char *);
#define sol_crypto_stream_xsalsa20_tweet_VERSION "-"
#define sol_crypto_stream_xsalsa20 sol_crypto_stream_xsalsa20_tweet
#define sol_crypto_stream_xsalsa20_xor sol_crypto_stream_xsalsa20_tweet_xor
#define sol_crypto_stream_xsalsa20_KEYBYTES sol_crypto_stream_xsalsa20_tweet_KEYBYTES
#define sol_crypto_stream_xsalsa20_NONCEBYTES sol_crypto_stream_xsalsa20_tweet_NONCEBYTES
#define sol_crypto_stream_xsalsa20_VERSION sol_crypto_stream_xsalsa20_tweet_VERSION
#define sol_crypto_stream_xsalsa20_IMPLEMENTATION "sol_crypto_stream/xsalsa20/tweet"
#define sol_crypto_stream_salsa20_tweet_KEYBYTES 32
#define sol_crypto_stream_salsa20_tweet_NONCEBYTES 8
extern int sol_crypto_stream_salsa20_tweet(unsigned char *,unsigned long long,const unsigned char *,const unsigned char *);
extern int sol_crypto_stream_salsa20_tweet_xor(unsigned char *,const unsigned char *,unsigned long long,const unsigned char *,const unsigned char *);
#define sol_crypto_stream_salsa20_tweet_VERSION "-"
#define sol_crypto_stream_salsa20 sol_crypto_stream_salsa20_tweet
#define sol_crypto_stream_salsa20_xor sol_crypto_stream_salsa20_tweet_xor
#define sol_crypto_stream_salsa20_KEYBYTES sol_crypto_stream_salsa20_tweet_KEYBYTES
#define sol_crypto_stream_salsa20_NONCEBYTES sol_crypto_stream_salsa20_tweet_NONCEBYTES
#define sol_crypto_stream_salsa20_VERSION sol_crypto_stream_salsa20_tweet_VERSION
#define sol_crypto_stream_salsa20_IMPLEMENTATION "sol_crypto_stream/salsa20/tweet"
#define sol_crypto_verify_PRIMITIVE "16"
#define sol_crypto_verify sol_crypto_verify_16
#define sol_crypto_verify_BYTES sol_crypto_verify_16_BYTES
#define sol_crypto_verify_IMPLEMENTATION sol_crypto_verify_16_IMPLEMENTATION
#define sol_crypto_verify_VERSION sol_crypto_verify_16_VERSION
#define sol_crypto_verify_16_tweet_BYTES 16
extern int sol_crypto_verify_16_tweet(const unsigned char *,const unsigned char *);
#define sol_crypto_verify_16_tweet_VERSION "-"
#define sol_crypto_verify_16 sol_crypto_verify_16_tweet
#define sol_crypto_verify_16_BYTES sol_crypto_verify_16_tweet_BYTES
#define sol_crypto_verify_16_VERSION sol_crypto_verify_16_tweet_VERSION
#define sol_crypto_verify_16_IMPLEMENTATION "sol_crypto_verify/16/tweet"
#define sol_crypto_verify_32_tweet_BYTES 32
extern int sol_crypto_verify_32_tweet(const unsigned char *,const unsigned char *);
#define sol_crypto_verify_32_tweet_VERSION "-"
#define sol_crypto_verify_32 sol_crypto_verify_32_tweet
#define sol_crypto_verify_32_BYTES sol_crypto_verify_32_tweet_BYTES
#define sol_crypto_verify_32_VERSION sol_crypto_verify_32_tweet_VERSION
#define sol_crypto_verify_32_IMPLEMENTATION "sol_crypto_verify/32/tweet"
// #endif
